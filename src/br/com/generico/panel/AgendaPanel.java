/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.generico.panel;

import br.com.generico.Main;
import br.com.generico.dao.AgendaDao;
import br.com.generico.to.Agenda;
import br.com.generico.utils.DatePicker;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import org.apache.log4j.Logger;

/**
 *
 * @author Marcos
 */
public class AgendaPanel extends javax.swing.JPanel {
    
    private static Logger logger = Logger.getLogger(AgendaPanel.class.getName());
    private static AgendaTableModel model = null;
    private SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form AgendaPanel
     */
    public AgendaPanel() {
        initComponents();
        Icon icone = new ImageIcon(getClass().getResource("/br/com/generico/utils/icon_calendar.png"));
        dataBtn.setIcon(icone);
        try {
            preencheAgenda(formataData.format(new Date()),true);
        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        data = new javax.swing.JTextField();
        dataBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();

        jLabel1.setText("Data:");

        data.setEditable(false);

        dataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataBtnActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jScrollPane1.setViewportView(jTable1);

        jToggleButton1.setText("Atualizar horário");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jToggleButton1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jToggleButton1))
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataBtnActionPerformed
        final JFrame f = new JFrame();
        JPanel p = new JPanel();
        Main.frame.getContentPane().add(p);
        Main.frame.pack();
        Main.frame.setVisible(true);
        data.setText(new DatePicker(Main.frame).setPickedDate());
        agendaDiaria();
    }//GEN-LAST:event_dataBtnActionPerformed
    
    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        int selecionado = jTable1.getSelectedRow();
        if (selecionado > -1) {
            AgendaTableModel model = (AgendaTableModel) jTable1.getModel();
            Agenda agenda = model.getData().get(selecionado);
            JFrame atualizaGuiaFrame = new JFrame("Atualizar Sessão");
            AtualizaGuiaPanel atualizaGuiaPanel = new AtualizaGuiaPanel(agenda);
            atualizaGuiaPanel.setAtualizaGuiaFrame(atualizaGuiaFrame);
            atualizaGuiaFrame.getContentPane().add(atualizaGuiaPanel);
            atualizaGuiaFrame.pack();
            atualizaGuiaFrame.setVisible(true);
            atualizaGuiaFrame.setLocationRelativeTo(null);
            atualizaGuiaFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        } else {            
            JOptionPane.showMessageDialog(null, "Por favor selecione um registro na tabela.");
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    
    private void agendaDiaria() {
        try {
            if (data.getText() == null || data.getText().trim().equals("")) {
                JOptionPane.showMessageDialog(null, "É necessário preencher pelo menos 1 filtro.");
                return;
            }
            preencheAgenda(data.getText().trim(), false);
        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro, por favor contate o desenvolvedor (Tel: 19-9354-5207).");
        }
    }
    
    public static void preencheAgenda(String campoData, boolean first) throws Exception {
        data.setText(campoData);
        List<Agenda> resultado = new AgendaDao().agendaDiaria(campoData);        
        if (resultado.isEmpty() && !first) {
            JOptionPane.showMessageDialog(null, "A pesquisa não retornou registros.");
            model = new AgendaTableModel();
            jTable1.setModel(model);
            return;
        }

        //TODO EXECUTA PESQUISA
        model = new AgendaTableModel();
        model.setRows(resultado);
        
        jTable1 = new JTable(model);
        jScrollPane1.setViewportView(jTable1);
        
        TableColumn hdr0 = jTable1.getTableHeader().getColumnModel().getColumn(0);
        hdr0.setPreferredWidth(90);
        hdr0.setMaxWidth(90);
        hdr0.setMinWidth(90);
        hdr0.setWidth(90);
        
        TableColumn hdr1 = jTable1.getTableHeader().getColumnModel().getColumn(1);
        hdr1.setPreferredWidth(300);
        hdr1.setMaxWidth(300);
        hdr1.setMinWidth(300);
        hdr1.setWidth(300);
        
        TableColumn hdr2 = jTable1.getTableHeader().getColumnModel().getColumn(2);
        hdr2.setPreferredWidth(130);
        hdr2.setMaxWidth(130);
        hdr2.setMinWidth(130);
        hdr2.setWidth(130);
        
        TableColumn hdr3 = jTable1.getTableHeader().getColumnModel().getColumn(3);
        hdr3.setPreferredWidth(150);
        hdr3.setMaxWidth(150);
        hdr3.setMinWidth(150);
        hdr3.setWidth(150);
        
        TableColumn hdr4 = jTable1.getTableHeader().getColumnModel().getColumn(4);
        hdr4.setPreferredWidth(250);
        hdr4.setMaxWidth(250);
        hdr4.setMinWidth(250);
        hdr4.setWidth(250);
        
        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jTable1.setRowHeight(25);
        model.fireTableDataChanged();
        
        jTable1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
            }
            
            @Override
            public void mousePressed(MouseEvent me) {
            }
            
            @Override
            public void mouseReleased(MouseEvent me) {
            }
            
            @Override
            public void mouseEntered(MouseEvent me) {
            }
            
            @Override
            public void mouseExited(MouseEvent me) {
            }
        });
    }

    // Variables declaration - do not modify
    // End of variables declaration
    public static class AgendaTableModel extends AbstractTableModel {
        
        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat formataAgenda = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        SimpleDateFormat formataHora = new SimpleDateFormat("HH:mm");
        //private Object[][] data = {};
        List<Agenda> data = new ArrayList<Agenda>();
        private String[] columns = {"Horário", "Nome", "CPF", "Convênio", "Descrição"};
        
        public String getColumnName(int column) {
            return columns[column];
        }
        
        public int getRowCount() {
            return data.size();
        }
        
        public int getColumnCount() {
            return columns.length;
        }
        
        public Object getValueAt(int rowNum, int colNum) {
            Agenda agenda = data.get(rowNum);
            if (colNum == 0) {
                return formataHora.format(agenda.getData());
            } else if (colNum == 1) {
                return agenda.getPessoa().getNome();
            } else if (colNum == 2) {
                return agenda.getPessoa().getCpf();
            } else if (colNum == 3){
                return agenda.getSessao().getConvenio();
            } else {
                return agenda.getGuia().getDescricao();
            }
        }
        
        public boolean isCellEditable(int row, int column) {
            if (column == 1) {
                return false;
            }
            return true;
        }
        
        public Class getColumnClass(int column) {
            if (column == 0) {
                return String.class;
            } else if (column == 1) {
                return String.class;
            } else {
                return String.class;
            }
        }
        
        public void setRows(List<Agenda> data) {
            this.data = data;
        }
        
        public List<Agenda> getData() {
            return data;
        }
        
        public void setValueAt(Object o, int row, int column) {
            try {
                Agenda rowObj = data.get(row);
                if (column == 0) {
                } else if (column == 1) {
                } else if (column == 2) {
                } else if (column == 3){
                } else {                    
                }                
            } catch (Exception e) {
                logger.error("Erro neste ponto:", e);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTextField data;
    private javax.swing.JButton dataBtn;
    private javax.swing.JLabel jLabel1;
    private static javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
