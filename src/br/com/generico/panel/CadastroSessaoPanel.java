/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.generico.panel;

import br.com.generico.Main;
import br.com.generico.dao.SessaoDao;
import br.com.generico.tablemodel.GuiaRow;
import br.com.generico.to.Guia;
import br.com.generico.to.Pessoa;
import br.com.generico.to.Sessao;
import br.com.generico.utils.DatePicker;
import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.EventObject;
import java.util.List;
import javax.swing.AbstractCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableColumn;
import org.apache.log4j.Logger;

/**
 *
 * @author Marcos
 */
public class CadastroSessaoPanel extends javax.swing.JPanel {

    private static GuiaTableModel model;
    public static Pessoa pessoaSessao;
    private SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
    private SimpleDateFormat formataHora = new SimpleDateFormat("HH:mm");
    private SimpleDateFormat formataDataHora = new SimpleDateFormat("dd/MM/yyyy HH:mm");
    public static boolean atualizaSessao = false;
    public static Long idAtualizaSessao = null;
    private static Logger logger = Logger.getLogger(CadastroSessaoPanel.class.getName());

    /**
     * Creates new form CadastroSessaoPanel
     */
    public CadastroSessaoPanel() {
        initComponents();
        Icon icone = new ImageIcon(getClass().getResource("/br/com/generico/utils/icon_calendar.png"));
        dataBtn.setIcon(icone);
        horaSpinner.setEditor(new JSpinner.DateEditor(horaSpinner, "HH:mm"));
        
        // não mostrar
        dataBtn.setVisible(false);
        data.setVisible(false);
        horaSpinner.setVisible(false);
        jLabel7.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nomeCliente = new javax.swing.JTextField();
        buscarBtn = new javax.swing.JButton();
        diagnostico = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        exame = new javax.swing.JTextField();
        horaSpinner = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        adicionarGuiaBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        data = new javax.swing.JTextField();
        dataBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        convenioList = new javax.swing.JList();
        exibirTodasSessoes = new javax.swing.JCheckBox();

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Exame:");

        jLabel1.setText("Convênio:");

        jLabel2.setText("Diagnóstico:");

        jLabel7.setText("Data:");

        horaSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1363575600000L), null, null, java.util.Calendar.DAY_OF_MONTH));

        jLabel9.setText("Cliente:");

        adicionarGuiaBtn.setText("Adicionar Sessão");
        adicionarGuiaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarGuiaBtnActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        data.setEditable(false);

        dataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dataBtnActionPerformed(evt);
            }
        });

        jButton1.setText("Gravar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Limpar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Pesquisar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Excluir Sessão");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        convenioList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "UNIMED", "SANTA CASA", "AMIL", "PARTICULAR" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        convenioList.setSelectedIndex(0);
        jScrollPane2.setViewportView(convenioList);

        exibirTodasSessoes.setText("Exbir todas sessões");
        exibirTodasSessoes.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                exibirTodasSessoesStateChanged(evt);
            }
        });
        exibirTodasSessoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exibirTodasSessoesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(26, 26, 26)
                        .addComponent(jButton1)
                        .addGap(27, 27, 27)
                        .addComponent(jButton3)
                        .addGap(153, 153, 153))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exame, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diagnostico))
                        .addGap(245, 245, 245))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(dataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15)
                                        .addComponent(horaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(buscarBtn))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(adicionarGuiaBtn)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)
                                .addGap(47, 47, 47)
                                .addComponent(exibirTodasSessoes)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(horaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(data, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dataBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(buscarBtn)
                    .addComponent(nomeCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(diagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(exame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adicionarGuiaBtn)
                    .addComponent(jButton4)
                    .addComponent(exibirTodasSessoes))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void adicionarGuiaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarGuiaBtnActionPerformed
        adicionarGuia();
    }//GEN-LAST:event_adicionarGuiaBtnActionPerformed

    private void adicionarGuia() {
        try {
            List<GuiaRow> content = null;
            if (model != null) {
                model = (GuiaTableModel) jTable1.getModel();
            } else {
                model = new GuiaTableModel();
            }

            content = model.getData();
            GuiaRow row = new GuiaRow();
            row.setData(null);
            row.setDescricao("");
            row.setFeito(Boolean.FALSE);
            row.setGuia(content.size() + 1);
            row.setIndice(content.size() + 1);
            content.add(row);

            setupTabelaGuia(content);

            jTable1.addMouseListener(new MouseListener() {
                @Override
                public void mouseClicked(MouseEvent me) {
                    int row = jTable1.rowAtPoint(me.getPoint());
                    int col = jTable1.columnAtPoint(me.getPoint());
                    if (col == 3) {
                        final JFrame f = new JFrame();
                        JPanel p = new JPanel();
                        Main.frame.getContentPane().add(p);
                        Main.frame.pack();
                        Main.frame.setVisible(true);
                        //jTable1.setValueAt(new DatePicker(Main.frame).setPickedDate(), row, col);
                    }
                    Point pt = new Point(me.getPoint());
                    do {
                        pt.y--;
                    } while (jTable1.rowAtPoint(pt) == row);
                    model.fireTableDataChanged();
                }

                @Override
                public void mousePressed(MouseEvent me) {
                }

                @Override
                public void mouseReleased(MouseEvent me) {
                }

                @Override
                public void mouseEntered(MouseEvent me) {
                }

                @Override
                public void mouseExited(MouseEvent me) {
                }
            });

        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
        }
    }

    private void dataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dataBtnActionPerformed
        JPanel p = new JPanel();
        Main.frame.getContentPane().add(p);
        Main.frame.pack();
        Main.frame.setVisible(true);
        data.setText(new DatePicker(Main.frame).setPickedDate());
    }//GEN-LAST:event_dataBtnActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        JFrame pesquisaClienteFrame = new JFrame();
        PesquisarClientePanel pesquisaClientePanel = new PesquisarClientePanel();
        pesquisaClientePanel.cadastroSessao = true;
        pesquisaClienteFrame.getContentPane().add(pesquisaClientePanel);
        pesquisaClientePanel.setCadastroSessaoFrame(pesquisaClienteFrame);
        pesquisaClienteFrame.pack();
        pesquisaClienteFrame.setVisible(true);
        pesquisaClienteFrame.setLocationRelativeTo(null);
        pesquisaClienteFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_buscarBtnActionPerformed

    public void preencheFormulario(Sessao sessao) {
        try {
            pessoaSessao = sessao.getPessoa();
            nomeCliente.setText(sessao.getPessoa().getNome().trim());

            if ("UNIMED".equals(sessao.getConvenio().trim())) {
                convenioList.setSelectedIndex(0);
            } else if ("SANTA CASA".equals(sessao.getConvenio().trim())) {
                convenioList.setSelectedIndex(1);
            } else if ("AMIL".equals(sessao.getConvenio().trim())) {
                convenioList.setSelectedIndex(2);
            } else {
                convenioList.setSelectedIndex(3);
            }


            data.setText(formataData.format(sessao.getData()));
            horaSpinner.setValue(sessao.getData());
            diagnostico.setText(sessao.getDiagnostico().trim());
            exame.setText(sessao.getExame().trim());
            preecheTabelaSessoes(sessao.getGuias());
            model.fireTableDataChanged();
        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro, por favor contate o desenvolvedor (Tel: 19-9354-5207).");
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            model.fireTableDataChanged();
            String dataStr = data.getText();
            String horaStr = formataHora.format(horaSpinner.getValue());
            String exameStr = exame.getText();
            String diagnosticoStr = diagnostico.getText();
            String convenioStr = convenioList.getSelectedValue().toString();
            Sessao sessao = new Sessao();
            if (dataStr != null && !dataStr.trim().equals("")) {
                sessao.setData(formataDataHora.parse(dataStr + " " + horaStr));
            }
            sessao.setDiagnostico(diagnosticoStr);
            sessao.setExame(exameStr);
            sessao.setConvenio(convenioStr);
            sessao.setPessoa(pessoaSessao);
            if (jTable1.getModel() instanceof GuiaTableModel) {
                GuiaTableModel guiaModel = (GuiaTableModel) jTable1.getModel();
                try {
                    sessao.setGuias(convertToGuia(guiaModel));
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, e.getMessage());
                    return;
                }
            }
            SessaoDao sessaoDao = new SessaoDao();

            if (atualizaSessao) {
                sessao.setId(idAtualizaSessao);
                sessaoDao.atualiza(sessao);
            } else {
                sessaoDao.inserir(sessao);
            }
            JOptionPane.showMessageDialog(this, "Registro gravado com sucesso.");
            limpaFormulario();
            try {
                AgendaPanel.preencheAgenda(AgendaPanel.data.getText().trim(), true);
            } catch (Exception e) {
                logger.error(e.getMessage());
            }
        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
            JOptionPane.showMessageDialog(this, e.getMessage());
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        limpaFormulario();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        exibirTodasSessoes.setSelected(false);
        JFrame pesquisaSessaoFrame = new JFrame("Pesquisar guia");
        PesquisarSessaoPanel pesquisaSessaoPanel = new PesquisarSessaoPanel();
        pesquisaSessaoFrame.getContentPane().add(pesquisaSessaoPanel);
        pesquisaSessaoPanel.setCadastroSessaoPanel(this);
        pesquisaSessaoPanel.setCadastroSessaoFrame(pesquisaSessaoFrame);
        pesquisaSessaoFrame.pack();
        pesquisaSessaoFrame.setVisible(true);
        pesquisaSessaoFrame.setLocationRelativeTo(null);
        pesquisaSessaoFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    try {
        List<GuiaRow> content = null;
        if (model != null) {
            model = (GuiaTableModel) jTable1.getModel();
        } else {
            model = new GuiaTableModel();
        }

        if (model.getData() != null) {
            content = new ArrayList<GuiaRow>();
            for (GuiaRow guiaRow : model.getData()) {
                if (guiaRow.getSelecionado() == null || !guiaRow.getSelecionado()) {
                    content.add(guiaRow);
                }
            }
        }
        setupTabelaGuia(content);
    } catch (Exception e) {
        logger.error("Erro neste ponto:", e);
    }
}//GEN-LAST:event_jButton4ActionPerformed

    private void exibirTodasSessoesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_exibirTodasSessoesStateChanged
        
    }//GEN-LAST:event_exibirTodasSessoesStateChanged

    private void exibirTodasSessoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exibirTodasSessoesActionPerformed
        try {
            JCheckBox todasSessoes = (JCheckBox)evt.getSource();
            if (idAtualizaSessao != null) {
                if(todasSessoes.isSelected()){
                    List<Guia> guias = new SessaoDao().guias(CadastroSessaoPanel.idAtualizaSessao, false);
                    if (guias != null) {
                        preecheTabelaSessoes(guias);
                    }
                } else {
                    List<Guia> guias = new SessaoDao().guias(CadastroSessaoPanel.idAtualizaSessao, true);
                    if (guias != null) {
                        preecheTabelaSessoes(guias);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_exibirTodasSessoesActionPerformed

    private void setupTabelaGuia(List<GuiaRow> content) throws Exception {
        model.setRows(content);
        jTable1 = new JTable(model);
        jScrollPane1.setViewportView(jTable1);

        TableColumn hdr0 = jTable1.getTableHeader().getColumnModel().getColumn(0);
        hdr0.setPreferredWidth(5);
        hdr0.setMaxWidth(5);
        hdr0.setMinWidth(5);
        hdr0.setWidth(5);

        TableColumn hdr1 = jTable1.getTableHeader().getColumnModel().getColumn(1);
        hdr1.setPreferredWidth(60);
        hdr1.setMaxWidth(60);
        hdr1.setMinWidth(60);
        hdr1.setWidth(60);

        TableColumn hdr3 = jTable1.getTableHeader().getColumnModel().getColumn(3);
        hdr3.setPreferredWidth(100);
        hdr3.setMaxWidth(100);
        hdr3.setMinWidth(100);
        hdr3.setWidth(100);

        TableColumn hdr4 = jTable1.getTableHeader().getColumnModel().getColumn(4);
        hdr4.setPreferredWidth(80);
        hdr4.setMaxWidth(80);
        hdr4.setMinWidth(80);
        hdr4.setWidth(80);

        TableColumn hdr5 = jTable1.getTableHeader().getColumnModel().getColumn(5);
        hdr5.setPreferredWidth(40);
        hdr5.setMaxWidth(40);
        hdr5.setMinWidth(40);
        hdr5.setWidth(40);

        // Set the spinner editor on the 1st visible column
        int vColIndex = 4;
        TableColumn col = jTable1.getColumnModel().getColumn(vColIndex);
        col.setCellEditor(new SpinnerEditor());

        ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
        cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jTable1.setRowHeight(25);

        model.fireTableDataChanged();

        jTable1.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent me) {
                int row = jTable1.rowAtPoint(me.getPoint());
                int col = jTable1.columnAtPoint(me.getPoint());
                if (col == 3) {
                    final JFrame f = new JFrame();
                    JPanel p = new JPanel();
                    Main.frame.getContentPane().add(p);
                    Main.frame.pack();
                    Main.frame.setVisible(true);
                    jTable1.setValueAt(new DatePicker(Main.frame).setPickedDate(), row, col);
                }
                Point pt = new Point(me.getPoint());
                do {
                    pt.y--;
                } while (jTable1.rowAtPoint(pt) == row);
                model.fireTableDataChanged();
            }

            @Override
            public void mousePressed(MouseEvent me) {
            }

            @Override
            public void mouseReleased(MouseEvent me) {
            }

            @Override
            public void mouseEntered(MouseEvent me) {
            }

            @Override
            public void mouseExited(MouseEvent me) {
            }
        });
    }

    private List<GuiaRow> convertToGuiaRow(List<Guia> lista) throws Exception {
        Collections.reverse(lista);
        List<GuiaRow> resultado = new ArrayList<GuiaRow>();
        if (lista != null) {
            int contador = 1;
            for (Guia guia : lista) {
                GuiaRow guiaRow = new GuiaRow();
                if (guia.getData() != null && !guia.getData().trim().equals("")) {
                    Date guiaData = formataData.parse(guia.getData());
                    guiaRow.setData(guiaData);
                }

                if (guia.getHora() != null && !guia.getHora().trim().equals("")) {
                    Date guiaHora = formataHora.parse(guia.getHora());
                    guiaRow.setHora(guiaHora);
                }

                if (guia.getDescricao() != null && !guia.getDescricao().trim().equals("")) {
                    guiaRow.setDescricao(guia.getDescricao().trim());
                }

                guiaRow.setFeito(guia.getFeito());
                guiaRow.setGuia(guia.getIndice());
                guiaRow.setIndice(contador++);
                resultado.add(guiaRow);
            }
        }
        return resultado;
    }

    private List<Guia> convertToGuia(GuiaTableModel guiaModel) throws Exception {
        List<Guia> resultado = new ArrayList<Guia>();
        if (guiaModel != null) {
            for (GuiaRow guiaRow : guiaModel.getData()) {
                Guia guia = new Guia();
                Date guiaData = guiaRow.getData();
                Date guiaHora = guiaRow.getHora();
                if (guiaData != null) {
                    guia.setData(formataData.format(guiaData));
                } else {
                    throw new Exception("Por favor preencha o campo data da sessão.");
                }
                if (guiaHora != null) {
                    guia.setHora(formataHora.format(guiaHora));
                } else {
                    throw new Exception("Por favor preencha o campo hora da sessão.");
                }

                if (guiaRow.getDescricao() != null && !guiaRow.getDescricao().trim().equals("")) {
                    guia.setDescricao(guiaRow.getDescricao().trim());
                } else {
                    throw new Exception("Por favor preencha o campo descrição da sessão.");
                }
                guia.setIndice(guiaRow.getGuia());
                guia.setFeito(guiaRow.getFeito());
                resultado.add(guia);
            }
        }
        return resultado;
    }

    private void preecheTabelaSessoes(List<Guia> guias) throws Exception {
        if (guias != null && !guias.isEmpty()) {
            List<GuiaRow> content = convertToGuiaRow(guias);
            model = new GuiaTableModel();
            model.setRows(content);
            jTable1.setModel(model);

            TableColumn hdr0 = jTable1.getTableHeader().getColumnModel().getColumn(0);
            hdr0.setPreferredWidth(5);
            hdr0.setMaxWidth(5);
            hdr0.setMinWidth(5);
            hdr0.setWidth(5);

            TableColumn hdr1 = jTable1.getTableHeader().getColumnModel().getColumn(1);
            hdr1.setPreferredWidth(60);
            hdr1.setMaxWidth(60);
            hdr1.setMinWidth(60);
            hdr1.setWidth(60);

            TableColumn hdr3 = jTable1.getTableHeader().getColumnModel().getColumn(3);
            hdr3.setPreferredWidth(100);
            hdr3.setMaxWidth(100);
            hdr3.setMinWidth(100);
            hdr3.setWidth(100);

            TableColumn hdr4 = jTable1.getTableHeader().getColumnModel().getColumn(4);
            hdr4.setPreferredWidth(80);
            hdr4.setMaxWidth(80);
            hdr4.setMinWidth(80);
            hdr4.setWidth(80);

            TableColumn hdr5 = jTable1.getTableHeader().getColumnModel().getColumn(5);
            hdr5.setPreferredWidth(40);
            hdr5.setMaxWidth(40);
            hdr5.setMinWidth(40);
            hdr5.setWidth(40);

            // Set the spinner editor on the 1st visible column
            int vColIndex = 4;
            TableColumn col = jTable1.getColumnModel().getColumn(vColIndex);
            col.setCellEditor(new SpinnerEditor());

            ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
            cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

            jTable1.setRowHeight(25);
        }
    }

    // Variables declaration - do not modify
    // End of variables declaration
    class GuiaTableModel extends AbstractTableModel {

        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat formataAgenda = new SimpleDateFormat("dd/MM/yyyy HH:mm");
        SimpleDateFormat formataHora = new SimpleDateFormat("HH:mm");
        //private Object[][] data = {};
        List<GuiaRow> data = new ArrayList<GuiaRow>();
        private String[] columns = {"", "Sessão", "Descrição", "Data", "Horário", "Feito"};

        public String getColumnName(int column) {
            return columns[column];
        }

        public int getRowCount() {
            return data.size();
        }

        public int getColumnCount() {
            return columns.length;
        }

        public Object getValueAt(int rowNum, int colNum) {
            GuiaRow row = data.get(rowNum);
            if (colNum == 0) {
                return ((GuiaRow) data.get(rowNum)).getSelecionado();
            } else if (colNum == 1) {
                return ((GuiaRow) data.get(rowNum)).getIndice();
            } else if (colNum == 2) {
                return ((GuiaRow) data.get(rowNum)).getDescricao();
            } else if (colNum == 3) {
                if (row.getData() != null) {
                    return formataData.format(row.getData());
                }
                return "";
            } else if (colNum == 4) {
                if (row.getHora() != null) {
                    return formataHora.format(row.getHora());
                }
                return "";
            } else {
                return ((GuiaRow) data.get(rowNum)).getFeito();
            }
        }

        public boolean isCellEditable(int row, int column) {
            if (column == 1) {
                return false;
            }
            return true;
        }

        public Class getColumnClass(int column) {
            if (column == 0) {
                return Boolean.class;
            } else if (column == 1) {
                return Integer.class;
            } else if (column == 2) {
                return String.class;
            } else if (column == 3) {
                return String.class;
            } else if (column == 4) {
                return String.class;
            } else {
                return Boolean.class;
            }
        }

        public void setRows(List<GuiaRow> data) {
            this.data = data;
        }

        public List<GuiaRow> getData() {
            return data;
        }

        public void setValueAt(Object o, int row, int column) {
            try {
                GuiaRow rowObj = data.get(row);
                if (column == 0) {
                    rowObj.setSelecionado((Boolean) o);
                } else if (column == 1) {
                    rowObj.setGuia(Integer.valueOf(o.toString()));
                } else if (column == 2) {
                    rowObj.setDescricao(o.toString());
                } else if (column == 3) {
                    if (o != null && !o.toString().trim().equals("")) {
                        rowObj.setData(formataData.parse(o.toString()));
                    }
                } else if (column == 4) {
                    if (o != null && !o.toString().trim().equals("")) {
                        rowObj.setHora((Date) o);
                    }
                } else if (column == 5) {
                    rowObj.setFeito((Boolean) o);
                }

            } catch (Exception e) {
                logger.error("Erro neste ponto:", e);
            }
        }
    }

    private void limpaFormulario() {
        try {
            data.setText("");
            horaSpinner.setValue(formataHora.parse("00:00"));
            nomeCliente.setText("");
            pessoaSessao = null;
            exame.setText("");
            diagnostico.setText("");
            convenioList.setSelectedIndex(0);
            atualizaSessao = false;
            if (jTable1.getModel() instanceof GuiaTableModel) {
                GuiaTableModel guiaModel = (GuiaTableModel) jTable1.getModel();
                guiaModel.setRows(new ArrayList<GuiaRow>());
                guiaModel.fireTableDataChanged();
            }
        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
        }
    }

    class SpinnerEditor extends AbstractCellEditor implements TableCellEditor {

        private JSpinner spinner = new JSpinner();
        private SimpleDateFormat formataHora = new SimpleDateFormat("dd/MM/yyyy HH:mm");

        // Initializes the spinner.
        public SpinnerEditor() {
            spinner.setModel(new javax.swing.SpinnerDateModel());
            spinner.setEditor(new javax.swing.JSpinner.DateEditor(spinner, "HH:mm"));
        }

        // Prepares the spinner component and returns it.
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            Object o = jTable1.getValueAt(row, column);
            if (o != null && !o.toString().trim().equals("")) {
                try {
                    spinner.setValue(formataHora.parse("01/01/2010 " + o.toString()));
                } catch (Exception e) {
                    logger.error("Erro neste ponto:", e);
                }
            } else {
                try {
                    spinner.setValue(formataHora.parse("01/01/2010 00:00"));
                } catch (Exception e) {
                    logger.error("Erro neste ponto:", e);
                }
            }

            return spinner;
        }

        // Enables the editor only for double-clicks.
        public boolean isCellEditable(EventObject evt) {
            return true;
        }

        // Returns the spinners current value.
        public Object getCellEditorValue() {
            return spinner.getValue();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarGuiaBtn;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JList convenioList;
    private javax.swing.JTextField data;
    private javax.swing.JButton dataBtn;
    private javax.swing.JTextField diagnostico;
    private javax.swing.JTextField exame;
    private javax.swing.JCheckBox exibirTodasSessoes;
    private javax.swing.JSpinner horaSpinner;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    public static javax.swing.JTextField nomeCliente;
    // End of variables declaration//GEN-END:variables
}
