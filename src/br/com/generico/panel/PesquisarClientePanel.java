/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.generico.panel;

import br.com.generico.dao.PessoaDao;
import br.com.generico.to.Pessoa;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import org.apache.log4j.Logger;

/**
 *
 * @author Marcos
 */
public class PesquisarClientePanel extends javax.swing.JPanel {

    private static PesquisaClienteTableModel model;
    public static boolean atualizaCliente = false;
    public static boolean cadastroSessao = false;
    private CadastroClientePanel cadastroClientePanel;
    private JFrame cadastroClienteFrame;
    private JFrame cadastroSessaoFrame;
    private static Logger logger = Logger.getLogger(PesquisarClientePanel.class.getName());

    /**
     * Creates new form PesquisarClientePanel
     */
    public PesquisarClientePanel() {
        initComponents();
    }

    class PesquisaClienteTableModel extends AbstractTableModel {
        //private Object[][] data = {};

        List<Pessoa> data = new ArrayList<Pessoa>();
        private String[] columns = {"Nome", "CPF", "RG", "Telefone"};

        public String getColumnName(int column) {
            return columns[column];
        }

        public int getRowCount() {
            return data.size();
        }

        public int getColumnCount() {
            return columns.length;
        }

        public Object getValueAt(int rowNum, int colNum) {
            Pessoa pessoa = data.get(rowNum);

            if (colNum == 0) {
                return pessoa.getNome();
            } else if (colNum == 1) {
                return pessoa.getCpf();
            } else if (colNum == 2) {
                return pessoa.getRg();
            } else if (colNum == 3) {
                return pessoa.getTelefone();
            }
            return null;
        }

        public boolean isCellEditable(int row, int column) {
            return false;
        }

        public Class getColumnClass(int column) {
            return String.class;
        }

        public void setRows(List<Pessoa> data) {
            this.data = data;
        }

        public List<Pessoa> getData() {
            return data;
        }

        public void setValueAt(Object o, int row, int column) {
            try {
                Pessoa rowObj = data.get(row);
                if (column == 0) {
                    rowObj.setNome(o.toString());
                } else if (column == 1) {
                    rowObj.setCpf(o.toString());
                } else if (column == 2) {
                    rowObj.setRg(o.toString());
                } else if (column == 3) {                    
                }
            } catch (Exception e) {
                logger.error("Erro neste ponto:", e);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cpf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        nome = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        jLabel1.setText("CPF:");

        jLabel2.setText("Nome:");

        jButton1.setText("Pesquisar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Selecionar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cpf, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(2, 2, 2)
                        .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {            
            if((nome.getText() == null || nome.getText().trim().equals("")) && 
             (cpf.getText() == null || cpf.getText().trim().equals(""))){
                JOptionPane.showMessageDialog(null, "É necessário preencher pelo menos 1 filtro.");
                return;
            }   
            
            Pessoa pessoa = new Pessoa();
            pessoa.setNome(nome.getText().trim());
            pessoa.setCpf(cpf.getText().trim());
                        
            List<Pessoa> resultado = new PessoaDao().pesquisa(pessoa);
            
            if(resultado.isEmpty()){
                JOptionPane.showMessageDialog(null, "A pesquisa não retornou registros.");
                return;
            }
            
            //TODO EXECUTA PESQUISA
            model = new PesquisaClienteTableModel();           
            model.setRows(resultado);

            jTable1 = new JTable(model);
            jScrollPane1.setViewportView(jTable1);

            TableColumn hdr0 = jTable1.getTableHeader().getColumnModel().getColumn(0);
            hdr0.setPreferredWidth(210);
            hdr0.setMaxWidth(210);
            hdr0.setMinWidth(210);
            hdr0.setWidth(210);

            TableColumn hdr1 = jTable1.getTableHeader().getColumnModel().getColumn(1);
            hdr1.setPreferredWidth(150);
            hdr1.setMaxWidth(150);
            hdr1.setMinWidth(150);
            hdr1.setWidth(150);

            TableColumn hdr2 = jTable1.getTableHeader().getColumnModel().getColumn(2);
            hdr2.setPreferredWidth(130);
            hdr2.setMaxWidth(130);
            hdr2.setMinWidth(130);
            hdr2.setWidth(130);

            TableColumn hdr3 = jTable1.getTableHeader().getColumnModel().getColumn(3);
            hdr3.setPreferredWidth(110);
            hdr3.setMaxWidth(110);
            hdr3.setMinWidth(110);
            hdr3.setWidth(110);

            ListSelectionModel cellSelectionModel = jTable1.getSelectionModel();
            cellSelectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            jTable1.setRowHeight(25);
            model.fireTableDataChanged();

            jTable1.addMouseListener(new MouseListener() {
                                
                @Override
                public void mouseClicked(MouseEvent me) {
                }

                @Override
                public void mousePressed(MouseEvent me) {
                }

                @Override
                public void mouseReleased(MouseEvent me) {                    
                }

                @Override
                public void mouseEntered(MouseEvent me) {
                }

                @Override
                public void mouseExited(MouseEvent me) {
                }
            });

        } catch (Exception e) {
            logger.error("Erro neste ponto:", e);
            JOptionPane.showMessageDialog(null, "Ocorreu um erro, por favor contate o desenvolvedor (Tel: 19-9354-5207).");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selecionado = jTable1.getSelectedRow();        
        if(selecionado > -1){
            PesquisaClienteTableModel model = (PesquisaClienteTableModel)jTable1.getModel();
            Pessoa pessoa = model.getData().get(selecionado);
            if(cadastroSessao){
                CadastroSessaoPanel.pessoaSessao = pessoa;
                CadastroSessaoPanel.nomeCliente.setText(pessoa.getNome().trim());
                cadastroSessao = false;
                WindowEvent wev = new WindowEvent(cadastroSessaoFrame, WindowEvent.WINDOW_CLOSING);
                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
            } else if(atualizaCliente){
                if(cadastroClientePanel != null){
                    cadastroClientePanel.preencheFormulario(pessoa);
                }                
                atualizaCliente = false;
                WindowEvent wev = new WindowEvent(cadastroClienteFrame, WindowEvent.WINDOW_CLOSING);
                Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(wev);
            }           
                        
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public CadastroClientePanel getCadastroClientePanel() {
        return cadastroClientePanel;
    }

    public void setCadastroClientePanel(CadastroClientePanel cadastroClientePanel) {
        this.cadastroClientePanel = cadastroClientePanel;
    }

    public JFrame getCadastroClienteFrame() {
        return cadastroClienteFrame;
    }

    public void setCadastroClienteFrame(JFrame cadastroClienteFrame) {
        this.cadastroClienteFrame = cadastroClienteFrame;
    }

    public JFrame getCadastroSessaoFrame() {
        return cadastroSessaoFrame;
    }

    public void setCadastroSessaoFrame(JFrame cadastroSessaoFrame) {
        this.cadastroSessaoFrame = cadastroSessaoFrame;
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cpf;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField nome;
    // End of variables declaration//GEN-END:variables
}
